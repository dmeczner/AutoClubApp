@page "/counter"
@using Radzen.Blazor

<h3>Dashy Administration</h3>


<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Add New Order" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && _employees.Count() > 0)" />
    <div style="white-space:nowrap; margin-left: 20px ">Edit Mode:</div>
    <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value" style="margin-right: 16px"
                     Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small"
                     Disabled="@(editMode == DataGridEditMode.Multiple && _employees.Count() > 1)" />
</RadzenStack>

<RadzenDataGrid @ref="ordersGrid" TItem="Person" Data="@_employees" Count="@_count" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" AllowFiltering="true" AllowPaging="true" PageSize="3" AllowSorting="true" EditMode="@editMode">
    <Columns>
        <RadzenDataGridColumn Width="200px" TItem="Person" Property="Id" Title="Order ID">
            <FooterTemplate>
                Total orders: <b>@_employees.Count()</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Person" Property="FirstName" Title="First Name" />
        <RadzenDataGridColumn TItem="Person" Property="LastName" Title="Last Name" />
        <RadzenDataGridColumn TItem="Person" Property="DayOfBirth" Title="Birthday" />
        <RadzenDataGridColumn TItem="Person" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="order">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(order))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    //https://blazor.radzen.com/datagrid-inline-edit
    IEnumerable<Person> orders;
    RadzenDataGrid<Person> ordersGrid;
    DataGridEditMode editMode = DataGridEditMode.Single;
    private IEnumerable<Person> _employees;
    private int _count;


    List<Person> ordersToInsert = new List<Person>();
    List<Person> ordersToUpdate = new List<Person>();

    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(Person order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new Person();
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }
    void OnUpdateRow(Person order)
    {
        Reset(order);

        //dbContext.Update(order);

        //dbContext.SaveChanges();
    }


    void OnCreateRow(Person order)
    {
        // dbContext.Add(order);

        // dbContext.SaveChanges();

        ordersToInsert.Remove(order);
    }

    async Task SaveRow(Person order)
    {
        await ordersGrid.UpdateRow(order);
    }

    async Task EditRow(Person order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    void CancelEdit(Person order)
    {
        Reset(order);

        ordersGrid.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(Person order)
    {

        Reset(order);

        if (orders.Contains(order))
        {
            // dbContext.Remove<Person>(order);

            // dbContext.SaveChanges();

            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
    }

    protected override Task OnInitializedAsync()
    {
        List<Person> persons = new List<Person>();
        var person1 = new Person { Id = 1, FirstName = "Max", LastName = "Mustermann", DayOfBirth = new DateTime(1990, 5, 19) };
        var person2 = new Person { Id = 2, FirstName = "Sabine", LastName = "Sonntag", DayOfBirth = new DateTime(1992, 4, 29) };
        persons.Add(person1);
        persons.Add(person2);

        _employees = persons;
        _count = persons.Count;

        return base.OnInitializedAsync();
    }

    public class Person
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime DayOfBirth{ get; set; }

    }
}