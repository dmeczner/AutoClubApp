@page "/cars"
@using AutoClubBlazorApp.AutoClubEntities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.Components.Server;
@using Microsoft.EntityFrameworkCore

<h3>Cars</h3>
@if (_selectedOwner == null)
{
    <p><em>Loading..</em></p>
}
else
{
    <h4>@_selectedOwner.FirstName @_selectedOwner.LastName</h4>


    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Add New Car" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && ownersToInsert.Count() > 0)" />
        <div style="white-space:nowrap; margin-left: 20px ">Edit Mode:</div>
        <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value" style="margin-right: 16px"
                         Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small"
                         Disabled="@(editMode == DataGridEditMode.Multiple && owners.Count() > 1)" />
    </RadzenStack>

    <RadzenDataGrid @ref="ownersGrid" TItem="Car" Data="@owners" Count="@_count" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" AllowFiltering="true" AllowPaging="true" PageSize="3" AllowSorting="true" EditMode="@editMode">
        <Columns>
            <RadzenDataGridColumn TItem="Car" Property="Id" Title="ID">
                <FooterTemplate>
                    Total cars: <b>@owners.Count()</b>
                </FooterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Property="CarBrand" Title="Car Brand">
                <EditTemplate Context="car">
                    <RadzenTextBox @bind-Value="car.CarBrand" Style="width:200px; display: block" Name="CarBrand" MaxLength="200" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Property="Type" Title="Type">
                <EditTemplate Context="car">
                    <RadzenTextBox @bind-Value="car.Type" Style="width:200px; display: block" Name="Type" MaxLength="200" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Property="LicensePlate" Title="License Plate">
                <EditTemplate Context="car">
                    <RadzenTextBox @bind-Value="car.LicensePlate" Style="width:200px; display: block" Name="LicensePlate" MaxLength="200" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Property="TimeOfProduction" Title="Time Of Production">
                <Template Context="car">
                    @String.Format("{0:d}", car.TimeOfProduction)
                </Template>
                <EditTemplate Context="car">
                    <RadzenDatePicker @bind-Value="car.TimeOfProduction" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Context="car" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="140px">
                <Template Context="car">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(car))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(car))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="car">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(car))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(car))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(car))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
@code {
    [Inject]
    ProtectedSessionStorage sessionStorage { get; set; }

    private Owner _selectedOwner;

    DataGridEditMode editMode = DataGridEditMode.Single;
    RadzenDataGrid<Car> ownersGrid;
    public AutoClubContext db = new();
    private IEnumerable<Car> owners;
    private int _count;

    List<Car> ownersToInsert = new List<Car>();
    List<Car> ownersToUpdate = new List<Car>();

    void Reset()
    {
        ownersToInsert.Clear();
        ownersToUpdate.Clear();
    }

    void Reset(Car owner)
    {
        ownersToInsert.Remove(owner);
        ownersToUpdate.Remove(owner);
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var owner = new Car { LicensePlate = "" };
        ownersToInsert.Add(owner);
        if (!owners.Any())
        {
            OnCreateRow(owner);
            await ownersGrid.Reload();
        }
        else
        {
            await ownersGrid.InsertRow(owner);
        }

    }
    void OnUpdateRow(Car owner)
    {
        Reset(owner);

        db.Update(owner);

        db.SaveChanges();
    }


    void OnCreateRow(Car owner)
    {
        db.Add(owner);

        db.SaveChanges();
        OwnersAndCarsConnection ownersAndCarsConnection = new OwnersAndCarsConnection()
            {
                CarId = owner.Id,
                OwnerId = _selectedOwner.Id,
            };

        db.Add(ownersAndCarsConnection);
        db.SaveChanges();
        ownersToInsert.Remove(owner);
    }

    async Task SaveRow(Car owner)
    {
        await ownersGrid.UpdateRow(owner);
    }

    async Task EditRow(Car owner)
    {
        if (editMode == DataGridEditMode.Single && ownersToInsert.Count() > 0)
        {
            Reset();
        }

        ownersToUpdate.Add(owner);
        await ownersGrid.EditRow(owner);
    }

    void CancelEdit(Car owner)
    {
        Reset(owner);

        ownersGrid.CancelEditRow(owner);

        var orderEntry = db.Entry(owner);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
    }

    async Task DeleteRow(Car owner)
    {

        Reset(owner);

        if (owners.Contains(owner))
        {
            db.Remove<Car>(owner);

            db.SaveChanges();

            await ownersGrid.Reload();
        }
        else
        {
            ownersGrid.CancelEditRow(owner);
            await ownersGrid.Reload();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // List<Owner> persons = new List<Owner>();
        // var person1 = new Owner { Id = 1, FirstName = "Max", LastName = "Mustermann", DayOfBirth = new DateTime(1990, 5, 19) };
        // var person2 = new Owner { Id = 2, FirstName = "Sabine", LastName = "Sonntag", DayOfBirth = new DateTime(1992, 4, 29) };
        // persons.Add(person1);
        // persons.Add(person2);

        // _employees = persons;
        // _count = persons.Count;

        await GetOrderID();
        await base.OnInitializedAsync();
        owners = db.SPGetCarsOfOwner(_selectedOwner.Id);
        //_count = owners.Any()? owners.Count() : 0;

    }

    private async Task GetOrderID()
    {
        var result = await sessionStorage.GetAsync<Owner>("SelectedOwner");

        if (result.Success)
        {
            _selectedOwner = result.Value;
            //result;
        }

    }

}
