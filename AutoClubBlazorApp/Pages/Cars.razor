@page "/cars"
@using AutoClubBlazorApp.AutoClubEntities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.Components.Server;
@using Microsoft.EntityFrameworkCore
@inject NavigationManager UriHelper
<h3>Cars</h3>
@if (_selectedOwner == null)
{
    <p><em>Loading..</em></p>
}
else
{
    <RadzenButton Text="◄" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => GoBack())" @onclick:stopPropagation="true" />
    <h4>@_selectedOwner.FirstName @_selectedOwner.LastName</h4>


    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Add New Car" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && carsToInsert.Count() > 0)" />
        <div style="white-space:nowrap; margin-left: 20px ">Edit Mode:</div>
        <RadzenSelectBar @bind-Value="@editMode" TextProperty="Text" ValueProperty="Value" style="margin-right: 16px"
                         Data="@(Enum.GetValues(typeof(DataGridEditMode)).Cast<DataGridEditMode>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small"
                         Disabled="@(editMode == DataGridEditMode.Multiple && cars.Count() > 1)" />
    </RadzenStack>

    <RadzenDataGrid @ref="carsGrid" TItem="Car" Data="@cars" Count="@_count" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" AllowFiltering="true" AllowPaging="true" PageSize="3" AllowSorting="true" EditMode="@editMode">
        <Columns>
            <RadzenDataGridColumn TItem="Car" Property="Id" Title="ID">
                <FooterTemplate>
                    Total cars: <b>@cars.Count()</b>
                </FooterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Property="CarBrand" Title="Car Brand">
                <EditTemplate Context="car">
                    <RadzenTextBox @bind-Value="car.CarBrand" Style="width:200px; display: block" Name="CarBrand" MaxLength="200" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Property="Type" Title="Type">
                <EditTemplate Context="car">
                    <RadzenTextBox @bind-Value="car.Type" Style="width:200px; display: block" Name="Type" MaxLength="200" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Property="LicensePlate" Title="License Plate">
                <EditTemplate Context="car">
                    <RadzenTextBox @bind-Value="car.LicensePlate" Style="width:200px; display: block" Name="LicensePlate" MaxLength="7" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Property="TimeOfProduction" Title="Time Of Production">
                <Template Context="car">
                    @String.Format("{0:d}", car.TimeOfProduction)
                </Template>
                <EditTemplate Context="car">
                    <RadzenDatePicker @bind-Value="car.TimeOfProduction" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Car" Context="car" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="140px">
                <Template Context="car">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(car))" @onclick:stopPropagation="true"/>
                </Template>
                <EditTemplate Context="car">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(car))"/>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(car))"/>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
@code {
    [Inject]
    ProtectedSessionStorage sessionStorage { get; set; }

    private Owner _selectedOwner;

    DataGridEditMode editMode = DataGridEditMode.Single;
    RadzenDataGrid<Car> carsGrid;
    public AutoClubContext db = new();
    private List<Car> cars;
    private int _count;

    List<Car> carsToInsert = new List<Car>();
    List<Car> carsToUpdate = new List<Car>();

    void Reset()
    {
        carsToInsert.Clear();
        carsToUpdate.Clear();
    }

    void Reset(Car car)
    {
        carsToInsert.Remove(car);
        carsToUpdate.Remove(car);
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var car = new Car { LicensePlate = "" };
        carsToInsert.Add(car);
        if (!cars.Any())
        {
            OnCreateRow(car);
            await carsGrid.Reload();
        }
        else
        {
            await carsGrid.InsertRow(car);
        }

    }
    void OnUpdateRow(Car car)
    {
        Reset(car);

        db.Update(car);
        db.SaveChanges();
        if (!car.OwnersAndCarsConnections.Any())
        {
            OwnersAndCarsConnection ownersAndCarsConnection = new OwnersAndCarsConnection()
                {
                    CarId = car.Id,
                    OwnerId = _selectedOwner.Id,
                };
            car.OwnersAndCarsConnections.Add(ownersAndCarsConnection);
        }
        db.SaveChanges();
    }


    void OnCreateRow(Car car)
    {
        db.Add(car);

        db.SaveChanges();
        OwnersAndCarsConnection ownersAndCarsConnection = new OwnersAndCarsConnection()
            {
                CarId = car.Id,
                OwnerId = _selectedOwner.Id,
            };

        db.Add(ownersAndCarsConnection);
        db.SaveChanges();
        carsToInsert.Remove(car);
    }

    async Task SaveRow(Car car)
    {
        await carsGrid.UpdateRow(car);
    }

    async Task EditRow(Car car)
    {
        if (editMode == DataGridEditMode.Single && carsToInsert.Count() > 0)
        {
            Reset();
        }

        carsToUpdate.Add(car);
        await carsGrid.EditRow(car);
    }

    void CancelEdit(Car car)
    {
        Reset(car);

        carsGrid.CancelEditRow(car);

        var carEntry = db.Entry(car);
        if (carEntry.State == EntityState.Modified)
        {
            carEntry.CurrentValues.SetValues(carEntry.OriginalValues);
            carEntry.State = EntityState.Unchanged;
        }
    }

    async Task GoBack() => UriHelper.NavigateTo("/");//code to redirect to second page

    async Task DeleteRow(Car car)
    {

        Reset(car);

        if (cars.Contains(car))
        {
            foreach (var item in car.OwnersAndCarsConnections)
            {
                db.Remove<OwnersAndCarsConnection>(item);
            }
            db.SaveChanges();

            await carsGrid.Reload();
        }
        else
        {
            carsGrid.CancelEditRow(car);
            await carsGrid.Reload();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetOrderID();
        await base.OnInitializedAsync();
        cars = db.SPGetCarsOfOwner(_selectedOwner.Id);
        if (!cars.Any())
        {
            cars.Add(new Car());
        }
        foreach (var owner in cars)
        {
            owner.OwnersAndCarsConnections = db.OwnersAndCarsConnections.ToList();
        }
        _count = cars.Count();
        db.SaveChanges();

    }

    private async Task GetOrderID()
    {
        var result = await sessionStorage.GetAsync<Owner>("SelectedOwner");

        if (result.Success)
        {
            _selectedOwner = result.Value;
        }

    }

}
